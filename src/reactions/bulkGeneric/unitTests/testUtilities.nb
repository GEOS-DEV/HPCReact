(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[     90042,       1964]
NotebookOptionsPosition[     40309,       1052]
NotebookOutlinePosition[     86590,       1905]
CellTagsIndexPosition[     86547,       1902]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Definitions", "Section",
 CellChangeTimes->{{3.9507142976250963`*^9, 
  3.95071432674226*^9}},ExpressionUUID->"f3e26940-8237-4241-93d0-\
55ea5669225a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"numReactions", " ", "=", " ", "11"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"numSpecies", " ", "=", " ", "18"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numPrimary", "=", 
    RowBox[{"numSpecies", " ", "-", " ", "numReactions"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Stoichiometric Matrix\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Nu]", "=", 
   RowBox[{"Array", "[", 
    RowBox[{"s", ",", 
     RowBox[{"{", 
      RowBox[{"numReactions", ",", "numSpecies"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"i", "=", "1"}], ",", 
    RowBox[{"i", "<=", "numReactions"}], ",", 
    RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"j", "=", "1"}], ",", 
      RowBox[{"j", "<=", "numReactions"}], ",", 
      RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"i", "!=", "j"}], ",", 
        RowBox[{
         RowBox[{"\[Nu]", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "j"}], "]"}], "]"}], "=", "0"}]}], "]"}]}], 
     "]"}]}], "]"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"primaryC", "=", 
    RowBox[{"Array", "[", 
     RowBox[{"pC", ",", 
      RowBox[{"{", "numPrimary", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Keq", " ", "=", 
    RowBox[{"Array", "[", 
     RowBox[{"keq", ",", 
      RowBox[{"{", "numReactions", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SecondaryC", "[", "j_", "]"}], ":=", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"Keq", "[", 
      RowBox[{"[", "j", "]"}], "]"}]], 
    RowBox[{"Product", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"primaryC", "[", 
        RowBox[{"[", "i", "]"}], "]"}], "^", 
       RowBox[{"\[Nu]", "[", 
        RowBox[{"[", 
         RowBox[{"j", ",", 
          RowBox[{"i", "+", "numReactions"}]}], "]"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numPrimary"}], "}"}]}], "]"}]}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AggregatePrimaryConcentration", "[", "i_", "]"}], ":=", 
  RowBox[{
   RowBox[{"primaryC", "[", 
    RowBox[{"[", "i", "]"}], "]"}], "+", 
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Nu]", "[", 
       RowBox[{"[", 
        RowBox[{"j", ",", 
         RowBox[{"i", "+", "numReactions"}]}], "]"}], "]"}], "*", 
      RowBox[{"SecondaryC", "[", "j", "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "numReactions"}], "}"}]}], 
    "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.950714087169869*^9, 3.9507142913200912`*^9}, {
   3.950714329662092*^9, 3.95071434686411*^9}, {3.950714423363348*^9, 
   3.95071442948774*^9}, {3.950714476234024*^9, 3.950714792714493*^9}, {
   3.950714826029373*^9, 3.950714855590313*^9}, {3.950714965073838*^9, 
   3.950715062783228*^9}, {3.9507150930171213`*^9, 3.950715501178611*^9}, {
   3.950716508109598*^9, 3.950716513327332*^9}, 3.950716927075334*^9, 
   3.950716975918405*^9, 3.950717401227003*^9, {3.9507184367092533`*^9, 
   3.950718437031938*^9}, 3.950718709676403*^9, {3.950718855975531*^9, 
   3.950718856242305*^9}, {3.950736694741858*^9, 3.950736699223733*^9}, 
   3.9507370394416857`*^9, {3.950737162045464*^9, 3.950737162625996*^9}, {
   3.9507407551950817`*^9, 3.950740758367703*^9}, {3.9507408362213287`*^9, 
   3.950740866850565*^9}, 3.950741141606223*^9, {3.9507411745142803`*^9, 
   3.950741193829092*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"e0abae85-70fd-48a3-bffb-7377316c6674"],

Cell[CellGroupData[{

Cell["Parameters", "Subsection",
 CellChangeTimes->{{3.9495084568495417`*^9, 
  3.949508469021983*^9}},ExpressionUUID->"fc26722d-7023-48b8-85c1-\
46767d9cf480"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"stoich", "=", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
       ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
       ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
       ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", 
       ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
       ",", "0", ",", "0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", 
       ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
       ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", 
       ",", "0", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
       ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", 
       ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
       ",", 
       RowBox[{"-", "1"}], ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", 
       ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
       ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
       ",", "1", ",", "0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", 
       ",", "0", ",", "2", ",", "0", ",", "0"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", 
       ",", "0", ",", "1", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
       ",", "0", ",", "1"}], "}"}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"MatrixForm", "[", "stoich", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"stoichSubstitution", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"s", "[", 
         RowBox[{"i", ",", "j"}], "]"}], "->", 
        RowBox[{"stoich", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "j"}], "]"}], "]"}]}], ")"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numReactions"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", "numSpecies"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sub\[Nu]", "=", 
   RowBox[{"\[Nu]", "/.", "stoichSubstitution"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", 
  RowBox[{"sub\[Nu]", "-", "stoich"}], "]"}]}], "Input",
 CellChangeTimes->{{3.9507164795900793`*^9, 3.9507164837761173`*^9}, {
  3.950716521633964*^9, 3.950716537417975*^9}, {3.950716632249382*^9, 
  3.9507166379925957`*^9}, {3.950716747148116*^9, 3.950716757355867*^9}, {
  3.9507168296186447`*^9, 3.950716832839553*^9}, {3.9507169001314583`*^9, 
  3.9507169114609222`*^9}, {3.9507170005344152`*^9, 3.950717162990752*^9}, {
  3.9507172080327177`*^9, 3.95071723417474*^9}, {3.950717430003286*^9, 
  3.9507174310925007`*^9}, {3.950734273883724*^9, 3.950734285599587*^9}, {
  3.9507343333008223`*^9, 3.9507343487371187`*^9}, {3.950734577731681*^9, 
  3.950734580471238*^9}, {3.9507347312365522`*^9, 3.950734731655718*^9}, {
  3.950734780125054*^9, 3.950734824687296*^9}, {3.9507348566569147`*^9, 
  3.950734915570918*^9}, {3.950734962820415*^9, 3.9507350701421833`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"8b7d8122-6f7f-4670-8ce2-f9a8afcd689f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.950734993304908*^9, 3.9507350334611177`*^9}, 
   3.950735071803692*^9, 3.950737045967061*^9, 3.9507371679414663`*^9, 
   3.9507397167591963`*^9, 3.950740884125201*^9, {3.950741181761883*^9, 
   3.950741200857772*^9}, 3.950805258491787*^9},
 CellLabel->
  "Out[15]//MatrixForm=",ExpressionUUID->"4f5ef07d-05b0-4375-b538-\
b1e1af3fa1c7"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"KeqValues", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"9.77", "*", 
      RowBox[{"10", "^", "13"}]}], ",", 
     RowBox[{"4.37", "*", 
      RowBox[{"10", "^", 
       RowBox[{"-", "07"}]}]}], ",", 
     RowBox[{"2.14", "*", 
      RowBox[{"10", "^", "10"}]}], ",", 
     RowBox[{"1.70", "*", 
      RowBox[{"10", "^", 
       RowBox[{"-", "04"}]}]}], ",", 
     RowBox[{"8.13", "*", 
      RowBox[{"10", "^", 
       RowBox[{"-", "02"}]}]}], ",", 
     RowBox[{"1.17", "*", 
      RowBox[{"10", "^", "07"}]}], ",", 
     RowBox[{"6.92", "*", 
      RowBox[{"10", "^", 
       RowBox[{"-", "03"}]}]}], ",", "4.68", ",", "3.98", ",", 
     RowBox[{"3.72", "*", 
      RowBox[{"10", "^", 
       RowBox[{"-", "03"}]}]}], ",", 
     RowBox[{"1.51", "*", 
      RowBox[{"10", "^", 
       RowBox[{"-", "01"}]}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"KeqSubstitution", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"keq", "[", "i", "]"}], "->", 
        RowBox[{"KeqValues", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], ")"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numReactions"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Keq", "/.", "KeqSubstitution"}], ")"}], "-", "KeqValues"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"primaryC0", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"3.76", "*", 
      RowBox[{"10", "^", 
       RowBox[{"-", "1"}]}]}], ",", 
     RowBox[{"3.76", "*", 
      RowBox[{"10", "^", 
       RowBox[{"-", "1"}]}]}], ",", 
     RowBox[{"3.87", "*", 
      RowBox[{"10", "^", 
       RowBox[{"-", "2"}]}]}], ",", 
     RowBox[{"3.21", "*", 
      RowBox[{"10", "^", 
       RowBox[{"-", "2"}]}]}], ",", "1.89", ",", 
     RowBox[{"1.65", "*", 
      RowBox[{"10", "^", 
       RowBox[{"-", "2"}]}]}], ",", "1.09"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InitialGuessSub", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"pC", "[", "i", "]"}], "->", 
       RowBox[{"primaryC0", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numPrimary"}], "}"}]}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.9507173466244783`*^9, 3.9507174248778963`*^9}, {
  3.9507350826783447`*^9, 3.9507351260306673`*^9}, {3.950736711668578*^9, 
  3.950736718714961*^9}, {3.950737193011694*^9, 3.95073723168333*^9}, {
  3.95073981705367*^9, 3.950739846321072*^9}, {3.950740259680213*^9, 
  3.9507402600062723`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"8aa82aff-49b9-4341-8356-8acc6643abe8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Subsection",
 CellChangeTimes->{{3.9507413091141577`*^9, 
  3.950741331072143*^9}},ExpressionUUID->"0ce3ce81-f483-40d9-96fc-\
3151a4955505"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Equations", "=", 
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"1", "-", 
         RowBox[{
          RowBox[{"AggregatePrimaryConcentration", "[", "i", "]"}], "/", 
          RowBox[{"primaryC0", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "numPrimary"}], "}"}]}], "]"}], "/.", 
      " ", "stoichSubstitution"}], "/.", " ", "KeqSubstitution"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LogSubstitution", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"pC", "[", "i", "]"}], "->", 
         RowBox[{"Exp", "[", 
          RowBox[{"LogPC", "[", "i", "]"}], "]"}]}], ")"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "numPrimary"}], "}"}]}], "]"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"LogC", "=", 
   RowBox[{"Array", "[", 
    RowBox[{"LogPC", ",", 
     RowBox[{"{", "numPrimary", "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"EquationsLog", "=", 
    RowBox[{"Equations", "/.", "LogSubstitution"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\n", 
 RowBox[{"LogSoln", "=", 
  RowBox[{
   RowBox[{"NSolve", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"EquationsLog", "==", "0"}], "}"}], ",", "LogC"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Soln", "=", 
  RowBox[{"Exp", "[", "LogSoln", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"CForm", "[", "Soln", "]"}]}], "Input",
 CellChangeTimes->{{3.95074141028202*^9, 3.950741529679229*^9}, {
   3.9507415987638483`*^9, 3.9507416305255833`*^9}, 3.950741690585013*^9, {
   3.9507433181509647`*^9, 3.950743352507516*^9}, {3.950743445036729*^9, 
   3.9507436719166517`*^9}, {3.9507437175122013`*^9, 
   3.9507438264420967`*^9}, {3.950744025142363*^9, 3.950744031220873*^9}, {
   3.950748899161949*^9, 3.950748899970667*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"3113f696-b57e-4e67-a6d1-3f1a7fcf8c97"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"LogPC", "[", "1", "]"}], "\[Rule]", 
    RowBox[{"-", "7.729428179421726`"}]}], ",", 
   RowBox[{
    RowBox[{"LogPC", "[", "2", "]"}], "\[Rule]", 
    RowBox[{"-", "7.895807972079195`"}]}], ",", 
   RowBox[{
    RowBox[{"LogPC", "[", "3", "]"}], "\[Rule]", 
    RowBox[{"-", "4.218781527953879`"}]}], ",", 
   RowBox[{
    RowBox[{"LogPC", "[", "4", "]"}], "\[Rule]", 
    RowBox[{"-", "5.9949216059603625`"}]}], ",", 
   RowBox[{
    RowBox[{"LogPC", "[", "5", "]"}], "\[Rule]", "0.6198284093815505`"}], ",", 
   RowBox[{
    RowBox[{"LogPC", "[", "6", "]"}], "\[Rule]", 
    RowBox[{"-", "4.617053079542639`"}]}], ",", 
   RowBox[{
    RowBox[{"LogPC", "[", "7", "]"}], "\[Rule]", "0.06981317428760604`"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.950741498992723*^9, 3.950741530425816*^9}, 
   3.950741632690414*^9, 3.950741691376844*^9, {3.95074346584057*^9, 
   3.950743478275736*^9}, {3.950743526473359*^9, 3.950743572322528*^9}, 
   3.950743606235183*^9, {3.950743648196509*^9, 3.950743664328627*^9}, {
   3.95074371540661*^9, 3.950743827126561*^9}, 3.950744032599369*^9, 
   3.9507489007895927`*^9, 3.950805258824353*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"67408caf-b328-4e1d-b570-78ef307c4ea9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"LogPC", "[", "1", "]"}], "\[Rule]", 
     RowBox[{"-", "7.729428179421726`"}]}]], ",", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"LogPC", "[", "2", "]"}], "\[Rule]", 
     RowBox[{"-", "7.895807972079195`"}]}]], ",", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"LogPC", "[", "3", "]"}], "\[Rule]", 
     RowBox[{"-", "4.218781527953879`"}]}]], ",", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"LogPC", "[", "4", "]"}], "\[Rule]", 
     RowBox[{"-", "5.9949216059603625`"}]}]], ",", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"LogPC", "[", "5", "]"}], "\[Rule]", "0.6198284093815505`"}]], 
   ",", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"LogPC", "[", "6", "]"}], "\[Rule]", 
     RowBox[{"-", "4.617053079542639`"}]}]], ",", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"LogPC", "[", "7", "]"}], "\[Rule]", "0.06981317428760604`"}]]}],
   "}"}]], "Output",
 CellChangeTimes->{{3.950741498992723*^9, 3.950741530425816*^9}, 
   3.950741632690414*^9, 3.950741691376844*^9, {3.95074346584057*^9, 
   3.950743478275736*^9}, {3.950743526473359*^9, 3.950743572322528*^9}, 
   3.950743606235183*^9, {3.950743648196509*^9, 3.950743664328627*^9}, {
   3.95074371540661*^9, 3.950743827126561*^9}, 3.950744032599369*^9, 
   3.9507489007895927`*^9, 3.9508052588248796`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"d765b6bf-72dd-4c70-a686-c120089abc33"],

Cell["\<\
List(Power(E,Rule(LogPC(1),-7.729428179421726)),Power(E,Rule(LogPC(2),-7.\
895807972079195)),Power(E,Rule(LogPC(3),-4.218781527953879)),Power(E,Rule(\
LogPC(4),-5.9949216059603625)),
   Power(E,Rule(LogPC(5),0.6198284093815505)),Power(E,Rule(LogPC(6),-4.\
617053079542639)),Power(E,Rule(LogPC(7),0.06981317428760604)))\
\>", "Output",
 CellChangeTimes->{{3.950741498992723*^9, 3.950741530425816*^9}, 
   3.950741632690414*^9, 3.950741691376844*^9, {3.95074346584057*^9, 
   3.950743478275736*^9}, {3.950743526473359*^9, 3.950743572322528*^9}, 
   3.950743606235183*^9, {3.950743648196509*^9, 3.950743664328627*^9}, {
   3.95074371540661*^9, 3.950743827126561*^9}, 3.950744032599369*^9, 
   3.9507489007895927`*^9, 3.950805258825659*^9},
 CellLabel->
  "Out[27]//CForm=",ExpressionUUID->"fc7dc0ee-5a49-4d22-899a-18d59444684c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Newton Tests", "Subsection",
 CellChangeTimes->{{3.95073380037182*^9, 3.950733817731336*^9}, {
  3.9508156474537773`*^9, 
  3.950815649345113*^9}},ExpressionUUID->"f7ecef76-bf6d-45c8-9dab-\
fc17b0b5da1a"],

Cell[CellGroupData[{

Cell["AggregatePrimaryConcentration", "Subsubsection",
 CellChangeTimes->{{3.9508156699587183`*^9, 
  3.950815680542221*^9}},ExpressionUUID->"e8e130b7-70af-4bfe-b31d-\
b12491de4bde"],

Cell[CellGroupData[{

Cell[BoxData[{"primaryC0", "\[IndentingNewLine]", 
 RowBox[{"solution", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"4.396954721488358", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "04"}]}]}], ",", 
    RowBox[{"3.723009698453808", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "04"}]}]}], ",", 
    RowBox[{"1.471656530812871", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "02"}]}]}], ",", 
    RowBox[{"2.491372274738741", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "03"}]}]}], ",", "1.858609094598949", ",", 
    RowBox[{"9.881874292035110", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "03"}]}]}], ",", "1.072307827865370"}], 
   "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"solutionSub", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"pC", "[", "i", "]"}], "->", 
       RowBox[{"solution", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "numPrimary"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"AggregatePrimaryConcentration", "[", "i", "]"}], "/.", 
      "stoichSubstitution"}], "/.", "KeqSubstitution"}], "/.", 
    "solutionSub"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "numPrimary"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.9507337392285433`*^9, 3.9507337841334343`*^9}, {
   3.950733856400872*^9, 3.9507338834063683`*^9}, {3.950733932924163*^9, 
   3.950733933965769*^9}, {3.950733987183701*^9, 3.950734079317182*^9}, {
   3.950734141472961*^9, 3.9507342321882763`*^9}, 3.950735176759543*^9, {
   3.950736592223568*^9, 3.95073659988105*^9}, {3.9507367608994417`*^9, 
   3.95073676997488*^9}, {3.950737257706077*^9, 3.950737257866434*^9}, {
   3.950739673615491*^9, 3.950739686774596*^9}, 3.950739843427329*^9, {
   3.9507398846437893`*^9, 3.95073993460244*^9}, {3.950740040986745*^9, 
   3.950740042267643*^9}, {3.9507409669764147`*^9, 3.950740971102459*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"e1a3d202-626e-4f4c-b9bf-5fe8b155010a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.376`", ",", "0.376`", ",", "0.038700000000000005`", ",", 
   "0.032100000000000004`", ",", "1.89`", ",", "0.0165`", ",", "1.09`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.950739936434867*^9, 3.9507400523932867`*^9, 3.950740267414735*^9, 
   3.950740884142179*^9, 3.950740971971713*^9, {3.950741181778664*^9, 
   3.9507412008736773`*^9}, 3.950805258828373*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"84d683e2-b188-4b96-b3fe-5a6805ba8f95"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.0004396954721488358`", ",", "0.0003723009698453808`", ",", 
   "0.014716565308128711`", ",", "0.002491372274738741`", ",", 
   "1.858609094598949`", ",", "0.00988187429203511`", ",", 
   "1.07230782786537`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.950739936434867*^9, 3.9507400523932867`*^9, 3.950740267414735*^9, 
   3.950740884142179*^9, 3.950740971971713*^9, {3.950741181778664*^9, 
   3.9507412008736773`*^9}, 3.950805258828973*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"aaf8d426-9a18-4e01-a1a3-1d6af2e61a61"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.37599999999996436`", ",", "0.375999999999965`", ",", 
   "0.03870000000000052`", ",", "0.032100000000000316`", ",", 
   "1.8900000000000003`", ",", "0.01650000000000011`", ",", 
   "1.0899999999999999`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.950739936434867*^9, 3.9507400523932867`*^9, 3.950740267414735*^9, 
   3.950740884142179*^9, 3.950740971971713*^9, {3.950741181778664*^9, 
   3.9507412008736773`*^9}, 3.950805258844371*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"3bc46865-b636-4f60-8954-928197e09e4e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Residual And Jacobian For Newton Tests", "Subsubsection",
 CellChangeTimes->{{3.950815690523181*^9, 
  3.950815725442919*^9}},ExpressionUUID->"af2290ce-d2e2-402e-b616-\
bc3eb67e6f9b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Residual0", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"1", "-", 
        RowBox[{
         RowBox[{"AggregatePrimaryConcentration", "[", "i", "]"}], "/", 
         RowBox[{"primaryC0", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "numPrimary"}], "}"}]}], "]"}], "/.", 
     "stoichSubstitution"}], "/.", "KeqSubstitution"}], "/.", 
   "solutionSub"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"J", "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"D", "[", 
         RowBox[{
          RowBox[{"AggregatePrimaryConcentration", "[", "i", "]"}], ",", 
          RowBox[{"primaryC", "[", 
           RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "numPrimary"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", "numPrimary"}], "}"}]}], "]"}], "/.", 
      "stoichSubstitution"}], "/.", "KeqSubstitution"}], "/.", 
    "solutionSub"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.9508156858317547`*^9},ExpressionUUID->"87b946f3-c389-4c3b-8a12-\
50f3089b86a6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"9.481304630298837`*^-14", ",", "9.314771176605063`*^-14", ",", 
   RowBox[{"-", "1.3322676295501878`*^-14"}], ",", 
   RowBox[{"-", "9.769962616701378`*^-15"}], ",", 
   RowBox[{"-", "4.440892098500626`*^-16"}], ",", 
   RowBox[{"-", "6.439293542825908`*^-15"}], ",", "2.220446049250313`*^-16"}],
   "}"}]], "Output",
 CellChangeTimes->{
  3.950739967020681*^9, 3.9507402705288057`*^9, 3.950740884157098*^9, {
   3.950741181801675*^9, 3.950741200898621*^9}, 3.9508052588562183`*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"bd853d6f-3ea9-46a4-bf58-60b00958cfc4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"secondarySolution", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"2.327841695586879", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "11"}]}]}], ",", 
    RowBox[{"3.745973700632716", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "01"}]}]}], ",", 
    RowBox[{"3.956656978189456", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "11"}]}]}], ",", 
    RowBox[{"9.629355924567627", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "04"}]}]}], ",", 
    RowBox[{"6.739226982791492", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "05"}]}]}], ",", 
    RowBox[{"1.065032288527957", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "09"}]}]}], ",", 
    RowBox[{"5.298329882666738", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "03"}]}]}], ",", 
    RowBox[{"5.844517547638333", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "03"}]}]}], ",", 
    RowBox[{"1.277319392670652", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "02"}]}]}], ",", 
    RowBox[{"6.618125707964991", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "03"}]}]}], ",", 
    RowBox[{"1.769217213462983", "*", 
     RowBox[{"10", "^", 
      RowBox[{"-", "02"}]}]}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"CForm", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"SecondaryC", "[", "i", "]"}], "/.", "stoichSubstitution"}], "/.",
       "KeqSubstitution"}], "/.", "solutionSub"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "numReactions"}], "}"}]}], "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.950740449712448*^9, 3.950740531468245*^9}, {
  3.950805292046373*^9, 3.950805296163287*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"e64dbc46-10b0-4bdc-a7ad-aada0ee57c69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2.327841695586879`*^-11", ",", "0.37459737006327165`", ",", 
   "3.956656978189456`*^-11", ",", "0.0009629355924567626`", ",", 
   "0.00006739226982791493`", ",", "1.065032288527957`*^-9", ",", 
   "0.0052983298826667375`", ",", "0.005844517547638333`", ",", 
   "0.012773193926706521`", ",", "0.006618125707964991`", ",", 
   "0.01769217213462983`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.9507404697151003`*^9, {3.950740506521928*^9, 3.950740513143564*^9}, 
   3.9507408841830683`*^9, {3.950741181893425*^9, 3.9507412009922323`*^9}, 
   3.9508052589444036`*^9, 3.9508052964561663`*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"da2d810b-0b5f-4788-9849-f22bc27693e9"],

Cell["\<\
List(2.3278416955869804e-11,0.3745973700632361,3.956656978189425e-11,0.\
0009629355924566718,0.00006739226982791149,1.065032288527949e-9,0.\
005298329882666744,0.005844517547638335,0.012773193926706526,
   0.006618125707964999,0.01769217213462983)\
\>", "Output",
 CellChangeTimes->{
  3.9507404697151003`*^9, {3.950740506521928*^9, 3.950740513143564*^9}, 
   3.9507408841830683`*^9, {3.950741181893425*^9, 3.9507412009922323`*^9}, 
   3.9508052589444036`*^9, 3.9508052964575443`*^9},
 CellLabel->
  "Out[41]//CForm=",ExpressionUUID->"ebb680c7-7030-4f1c-a174-0775d54d40a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"dSdP", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"SecondaryC", "[", "i", "]"}], "/.", "LogSubstitution"}], 
         ",", 
         RowBox[{"LogC", "[", 
          RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "numPrimary"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "numPrimary"}], "}"}]}], "]"}], "/.", 
     "stoichSubstitution"}], "/.", "KeqSubstitution"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9508093961162977`*^9, 3.950809473203849*^9}, {
   3.950810171084594*^9, 3.950810178194281*^9}, 3.950810457303884*^9, {
   3.950812374021105*^9, 3.950812388271319*^9}, {3.950812446394197*^9, 
   3.9508124573620787`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"e1638f60-a927-4ceb-89b0-cd8b3d67e22c"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{"-", "1.0235414534288639`*^-14"}], " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"-", 
         RowBox[{"LogPC", "[", "1", "]"}]}]]}], "0", "0", "0", "0", "0", 
      "0"},
     {
      RowBox[{"2.288329519450801`*^6", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"LogPC", "[", "1", "]"}], "+", 
         RowBox[{"LogPC", "[", "2", "]"}]}]]}], 
      RowBox[{"2.288329519450801`*^6", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"LogPC", "[", "1", "]"}], "+", 
         RowBox[{"LogPC", "[", "2", "]"}]}]]}], "0", "0", "0", "0", "0"},
     {
      RowBox[{
       RowBox[{"-", "4.6728971962616824`*^-11"}], " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"LogPC", "[", "1", "]"}]}], "+", 
         RowBox[{"LogPC", "[", "2", "]"}]}]]}], 
      RowBox[{"4.6728971962616824`*^-11", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"LogPC", "[", "1", "]"}]}], "+", 
         RowBox[{"LogPC", "[", "2", "]"}]}]]}], "0", "0", "0", "0", "0"},
     {
      RowBox[{"5882.35294117647`", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"LogPC", "[", "1", "]"}], "+", 
         RowBox[{"LogPC", "[", "2", "]"}]}]]}], 
      RowBox[{"5882.35294117647`", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"LogPC", "[", "1", "]"}], "+", 
         RowBox[{"LogPC", "[", "2", "]"}]}]]}], "0", "0", "0", "0", "0"},
     {"0", 
      RowBox[{"12.300123001230011`", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"LogPC", "[", "2", "]"}], "+", 
         RowBox[{"LogPC", "[", "3", "]"}]}]]}], 
      RowBox[{"12.300123001230011`", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"LogPC", "[", "2", "]"}], "+", 
         RowBox[{"LogPC", "[", "3", "]"}]}]]}], "0", "0", "0", "0"},
     {
      RowBox[{
       RowBox[{"-", "8.547008547008547`*^-8"}], " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"LogPC", "[", "1", "]"}]}], "+", 
         RowBox[{"LogPC", "[", "2", "]"}], "+", 
         RowBox[{"LogPC", "[", "3", "]"}]}]]}], 
      RowBox[{"8.547008547008547`*^-8", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"LogPC", "[", "1", "]"}]}], "+", 
         RowBox[{"LogPC", "[", "2", "]"}], "+", 
         RowBox[{"LogPC", "[", "3", "]"}]}]]}], 
      RowBox[{"8.547008547008547`*^-8", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"LogPC", "[", "1", "]"}]}], "+", 
         RowBox[{"LogPC", "[", "2", "]"}], "+", 
         RowBox[{"LogPC", "[", "3", "]"}]}]]}], "0", "0", "0", "0"},
     {"0", "0", 
      RowBox[{"144.50867052023122`", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"LogPC", "[", "3", "]"}], "+", 
         RowBox[{"LogPC", "[", "4", "]"}]}]]}], 
      RowBox[{"144.50867052023122`", " ", 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"LogPC", "[", "3", "]"}], "+", 
         RowBox[{"LogPC", "[", "4", "]"}]}]]}], "0", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.950809406179163*^9, 3.950809410976438*^9}, {
   3.9508094607587214`*^9, 3.95080947369197*^9}, {3.950810171921527*^9, 
   3.950810178557377*^9}, 3.950810458074232*^9, {3.950812379433378*^9, 
   3.950812388797266*^9}, 3.950812459398246*^9},
 CellLabel->
  "Out[55]//MatrixForm=",ExpressionUUID->"25d2caee-feda-48f3-822a-\
b966e95d725e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SecondaryC", "[", "3", "]"}], "/.", 
  "stoichSubstitution"}]], "Input",
 CellChangeTimes->{{3.950810196188916*^9, 3.950810222794004*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"7e0a7185-27a0-4a34-a88a-bd41f339fd4d"],

Cell[BoxData[
 FractionBox[
  RowBox[{"pC", "[", "2", "]"}], 
  RowBox[{
   RowBox[{"keq", "[", "3", "]"}], " ", 
   RowBox[{"pC", "[", "1", "]"}]}]]], "Output",
 CellChangeTimes->{{3.950810196734111*^9, 3.95081022321537*^9}},
 CellLabel->"Out[51]=",ExpressionUUID->"fc62e809-8552-411d-aa0f-a085a4186799"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "J", "]"}]], "Input",
 CellChangeTimes->{{3.950748443273632*^9, 3.950748453528639*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"2c8dda48-d195-4b9e-bcff-e2f0e0c7a7e2"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"855.137307687453`", "1008.7545694739038`", 
      RowBox[{"-", "7.236962336175529`*^-8"}], "0", "0", "0", "0"},
     {"854.1373026101295`", "1009.935590971252`", "0.004579420092198771`", 
      "0", "0", "0", "0"},
     {
      RowBox[{"-", "2.422204357309002`*^-6"}], "0.181018424121186`", 
      "2.629689685719298`", "2.126671287301837`", "0.01688946077594919`", "0",
       "0"},
     {"0", "0", "0.36002489519345965`", "12.884465451220654`", "0", 
      "0.6697237297684787`", "0.016499154137342653`"},
     {"0", "0", "2.1330320454401535`", "0", "1.0306343563151188`", "0", "0"},
     {"0", "0", "0", "2.656417820439546`", "0", "1.6697237297684788`", "0"},
     {"0", "0", "0", "7.10137634347927`", "0", "0", "1.0164991541373427`"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.950748444174212*^9, 3.950748453913351*^9}, 
   3.9508052589540663`*^9},
 CellLabel->
  "Out[36]//MatrixForm=",ExpressionUUID->"7ef5d411-fb3b-4046-a57e-\
6ba91e14b946"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"AggregatePrimaryConcentration", "[", "1", "]"}], "/.", 
      "stoichSubstitution"}], "/.", "KeqSubstitution"}], "/.", 
    "LogSubstitution"}], ",", 
   RowBox[{"LogC", "[", "1", "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dACdLogC", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"AggregatePrimaryConcentration", "[", "i", "]"}], "/.", 
          "stoichSubstitution"}], "/.", "KeqSubstitution"}], "/.", 
        "LogSubstitution"}], ",", 
       RowBox[{"LogC", "[", 
        RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "numPrimary"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "numPrimary"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"CForm", "[", 
  RowBox[{"dACdLogC", "/.", "LogSoln"}], "]"}]}], "Input",
 CellChangeTimes->{{3.950748634422401*^9, 3.950748647313183*^9}, {
  3.9507486911915693`*^9, 3.95074883652949*^9}, {3.950748913278812*^9, 
  3.950748943606131*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"fd2d747d-2d9e-4fde-9b35-ffaa4e45ae89"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.950748635265077*^9, 3.950748647858265*^9}, 
   3.950748692168003*^9, 3.950748745214094*^9, {3.950748820073193*^9, 
   3.950748837082934*^9}, {3.950748914422359*^9, 3.95074894393454*^9}, 
   3.950805258956765*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"50f7e47b-ed47-4f7f-86e3-569bd548ba47"],

Cell["\<\
List(List(0.3760000022557546,0.3755603045511293,-1.0650322885265095e-9,0,0,0,\
0),List(0.3755603045511293,0.37600000000000006,0.00006739333486015734,0,0,0,0),
   List(-1.0650322885265095e-9,0.00006739333486015734,0.03870000000000001,0.\
005298329882666651,0.031390905401051036,0,0),
   List(0,0,0.005298329882666651,0.032100000000000004,0,0.006618125707964927,\
0.01769217213462971),List(0,0,0.031390905401051036,0,1.9155463878534127,0,0),
   List(0,0,0,0.006618125707964927,0,0.016500000000000008,0),List(0,0,0,0.\
01769217213462971,0,0,1.09))\
\>", "Output",
 CellChangeTimes->{{3.950748635265077*^9, 3.950748647858265*^9}, 
   3.950748692168003*^9, 3.950748745214094*^9, {3.950748820073193*^9, 
   3.950748837082934*^9}, {3.950748914422359*^9, 3.95074894393454*^9}, 
   3.950805259030347*^9},
 CellLabel->
  "Out[39]//CForm=",ExpressionUUID->"92e76ba9-3451-4172-ace3-dfe4af370d83"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1312, 790},
WindowMargins->{{905, Automatic}, {237, Automatic}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{
             LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"a28b3015-6f16-4c7c-8643-f4ea909adb24"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 157, 3, 66, "Section",ExpressionUUID->"f3e26940-8237-4241-93d0-55ea5669225a"],
Cell[736, 27, 3827, 99, 376, "Input",ExpressionUUID->"e0abae85-70fd-48a3-bffb-7377316c6674"],
Cell[CellGroupData[{
Cell[4588, 130, 160, 3, 53, "Subsection",ExpressionUUID->"fc26722d-7023-48b8-85c1-46767d9cf480"],
Cell[CellGroupData[{
Cell[4773, 137, 5140, 106, 376, "Input",ExpressionUUID->"8b7d8122-6f7f-4670-8ce2-f9a8afcd689f"],
Cell[9916, 245, 1950, 42, 214, "Output",ExpressionUUID->"4f5ef07d-05b0-4375-b538-b1e1af3fa1c7"]
}, Open  ]],
Cell[11881, 290, 2812, 84, 111, "Input",ExpressionUUID->"8aa82aff-49b9-4341-8356-8acc6643abe8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14730, 379, 158, 3, 53, "Subsection",ExpressionUUID->"0ce3ce81-f483-40d9-96fc-3151a4955505"],
Cell[CellGroupData[{
Cell[14913, 386, 2231, 58, 233, "Input",ExpressionUUID->"3113f696-b57e-4e67-a6d1-3f1a7fcf8c97"],
Cell[17147, 446, 1278, 29, 33, "Output",ExpressionUUID->"67408caf-b328-4e1d-b570-78ef307c4ea9"],
Cell[18428, 477, 1576, 37, 35, "Output",ExpressionUUID->"d765b6bf-72dd-4c70-a686-c120089abc33"],
Cell[20007, 516, 835, 14, 64, "Output",ExpressionUUID->"fc7dc0ee-5a49-4d22-899a-18d59444684c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[20891, 536, 210, 4, 53, "Subsection",ExpressionUUID->"f7ecef76-bf6d-45c8-9dab-fc17b0b5da1a"],
Cell[CellGroupData[{
Cell[21126, 544, 182, 3, 43, "Subsubsection",ExpressionUUID->"e8e130b7-70af-4bfe-b31d-b12491de4bde"],
Cell[CellGroupData[{
Cell[21333, 551, 2142, 51, 111, "Input",ExpressionUUID->"e1a3d202-626e-4f4c-b9bf-5fe8b155010a"],
Cell[23478, 604, 489, 10, 33, "Output",ExpressionUUID->"84d683e2-b188-4b96-b3fe-5a6805ba8f95"],
Cell[23970, 616, 564, 11, 33, "Output",ExpressionUUID->"aaf8d426-9a18-4e01-a1a3-1d6af2e61a61"],
Cell[24537, 629, 560, 11, 33, "Output",ExpressionUUID->"3bc46865-b636-4f60-8954-928197e09e4e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[25146, 646, 189, 3, 43, "Subsubsection",ExpressionUUID->"af2290ce-d2e2-402e-b616-bc3eb67e6f9b"],
Cell[CellGroupData[{
Cell[25360, 653, 1253, 36, 49, "Input",ExpressionUUID->"87b946f3-c389-4c3b-8a12-50f3089b86a6"],
Cell[26616, 691, 601, 11, 35, "Output",ExpressionUUID->"bd853d6f-3ea9-46a4-bf58-60b00958cfc4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27254, 707, 1760, 50, 90, "Input",ExpressionUUID->"e64dbc46-10b0-4bdc-a7ad-aada0ee57c69"],
Cell[29017, 759, 713, 13, 35, "Output",ExpressionUUID->"da2d810b-0b5f-4788-9849-f22bc27693e9"],
Cell[29733, 774, 583, 11, 64, "Output",ExpressionUUID->"ebb680c7-7030-4f1c-a174-0775d54d40a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30353, 790, 953, 23, 29, "Input",ExpressionUUID->"e1638f60-a927-4ceb-89b0-cd8b3d67e22c"],
Cell[31309, 815, 4162, 108, 159, "Output",ExpressionUUID->"25d2caee-feda-48f3-822a-b966e95d725e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35508, 928, 252, 5, 29, "Input",ExpressionUUID->"7e0a7185-27a0-4a34-a88a-bd41f339fd4d"],
Cell[35763, 935, 305, 7, 48, "Output",ExpressionUUID->"fc62e809-8552-411d-aa0f-a085a4186799"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36105, 947, 208, 3, 29, "Input",ExpressionUUID->"2c8dda48-d195-4b9e-bcff-e2f0e0c7a7e2"],
Cell[36316, 952, 1384, 31, 149, "Output",ExpressionUUID->"7ef5d411-fb3b-4046-a57e-6ba91e14b946"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37737, 988, 1278, 34, 90, "Input",ExpressionUUID->"fd2d747d-2d9e-4fde-9b35-ffaa4e45ae89"],
Cell[39018, 1024, 342, 5, 33, "Output",ExpressionUUID->"50f7e47b-ed47-4f7f-86e3-569bd548ba47"],
Cell[39363, 1031, 894, 15, 99, "Output",ExpressionUUID->"92e76ba9-3451-4172-ace3-dfe4af370d83"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

