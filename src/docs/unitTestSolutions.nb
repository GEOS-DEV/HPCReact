(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[     87425,       1920]
NotebookOptionsPosition[     36820,       1002]
NotebookOutlinePosition[     83103,       1855]
CellTagsIndexPosition[     83060,       1852]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Parameters", "Subsection",
 CellChangeTimes->{{3.9495084568495417`*^9, 
  3.949508469021983*^9}},ExpressionUUID->"fc26722d-7023-48b8-85c1-\
46767d9cf480"],

Cell[CellGroupData[{

Cell["Stoichiometric coefficients", "Subsubsection",
 CellChangeTimes->{{3.949508391325492*^9, 
  3.949508444469901*^9}},ExpressionUUID->"1381253b-1cee-4677-9924-\
3ae5ff3f591b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"params", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"s11", "->", 
      RowBox[{"-", "2"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"s12", "->", "1"}], ",", "\[IndentingNewLine]", 
     RowBox[{"s13", "->", "1"}], ",", "\[IndentingNewLine]", 
     RowBox[{"s14", "->", "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"s15", "->", "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"s21", "->", "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"s22", "->", "0"}], ",", "\[IndentingNewLine]", 
     RowBox[{"s23", "->", 
      RowBox[{"-", "1"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"s24", "->", 
      RowBox[{"-", "1"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"s25", "->", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{"kf1", "->", "1"}], ",", "\[IndentingNewLine]", 
     RowBox[{"kf2", "->", 
      RowBox[{"1", "/", "2"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"kr1", "->", "1"}], ",", "\[IndentingNewLine]", 
     RowBox[{"kr2", "->", 
      RowBox[{"1", "/", "2"}]}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.949508267282798*^9, 3.949508311358677*^9}, {
   3.9495083497367477`*^9, 3.94950838545938*^9}, 3.949508484611622*^9, {
   3.949508692119485*^9, 3.9495087731819353`*^9}, {3.949509634551033*^9, 
   3.949509798898355*^9}, {3.949510212552845*^9, 3.949510286776422*^9}, 
   3.949510321286622*^9, {3.949516950757416*^9, 3.949516956027116*^9}, {
   3.949539815846404*^9, 3.949539819403913*^9}, 3.9506241038935747`*^9},
 CellLabel->"In[98]:=",ExpressionUUID->"f05eb77c-7421-427a-aa79-c3b5ccb04b2b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"nReactions", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nSpecies", "=", "5"}], ";"}]}], "Input",
 CellChangeTimes->{{3.950620557675478*^9, 3.950620570435486*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"9f948fa6-a196-4942-89cd-3bcc02e84379"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initial concentrations", "Subsection",
 CellChangeTimes->{{3.9495084568495417`*^9, 3.949508469021983*^9}, {
  3.9495087949303913`*^9, 
  3.9495087982624683`*^9}},ExpressionUUID->"eb36e91f-06f8-4680-b0a7-\
05604cf51085"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"c0", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", ".5", ",", "1.", ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cinit", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"c1", "->", 
      RowBox[{"c0", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ",", 
     RowBox[{"c2", "->", 
      RowBox[{"c0", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], ",", 
     RowBox[{"c3", "->", 
      RowBox[{"c0", "[", 
       RowBox[{"[", "3", "]"}], "]"}]}], ",", 
     RowBox[{"c4", "->", 
      RowBox[{"c0", "[", 
       RowBox[{"[", "4", "]"}], "]"}]}], ",", 
     RowBox[{"c5", "->", 
      RowBox[{"c0", "[", 
       RowBox[{"[", "5", "]"}], "]"}]}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.949508804613399*^9, 3.9495088235719633`*^9}, {
  3.9495159625813637`*^9, 3.949515973011286*^9}, {3.94951646308127*^9, 
  3.949516497429237*^9}, {3.9495170226720657`*^9, 3.949517064712237*^9}, {
  3.949517415239509*^9, 3.949517472214342*^9}, {3.950104163970237*^9, 
  3.9501041977054453`*^9}, {3.950621926576581*^9, 3.9506219294165077`*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"effab617-c8cb-4bd9-9fd9-e748f6e0df0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Symbolic Math", "Section",
 CellChangeTimes->{{3.949509007212892*^9, 
  3.94950902247628*^9}},ExpressionUUID->"e6fcff66-665b-4fac-bf98-\
e002eed40fab"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"s", "=", 
   RowBox[{"(", GridBox[{
      {"s11", "s12", "s13", "s14", "s15"},
      {"s21", "s22", "s23", "s24", "s25"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c", "=", 
   RowBox[{"{", 
    RowBox[{"c1", ",", "c2", ",", "c3", ",", "c4", ",", "c5"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"kf", "=", 
   RowBox[{"{", 
    RowBox[{"kf1", ",", "kf2"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"kr", "=", 
   RowBox[{"{", 
    RowBox[{"kr1", ",", "kr2"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Xi]", "=", 
   RowBox[{"{", 
    RowBox[{"\[Xi]1", ",", "\[Xi]2"}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.949509029618278*^9, 3.949509111793108*^9}, {
  3.949509223326679*^9, 3.949509243668706*^9}, {3.949509433132827*^9, 
  3.9495094555773478`*^9}, {3.949517159140397*^9, 3.9495171770174017`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"846ea83c-dafa-44d9-9f09-382cf0c65a5c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Simple Test System", "Section",
 CellChangeTimes->{{3.9495082568983383`*^9, 
  3.949508261839707*^9}},ExpressionUUID->"ddc1104c-460c-4b4e-9381-\
a177b6a320d1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ForwardReactionProduct", "[", "r_", "]"}], ":=", 
   RowBox[{"Product", "[", 
    RowBox[{
     RowBox[{"Piecewise", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"c", "[", 
            RowBox[{"[", "j", "]"}], "]"}], "^", 
           RowBox[{"-", 
            RowBox[{"s", "[", 
             RowBox[{"[", 
              RowBox[{"r", ",", "j"}], "]"}], "]"}]}]}], ",", 
          RowBox[{
           RowBox[{"s", "[", 
            RowBox[{"[", 
             RowBox[{"r", ",", "j"}], "]"}], "]"}], "<", "0"}]}], "}"}], 
        "}"}], ",", "1"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", "5"}], "}"}]}], "]"}]}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ReverseReactionProduct", "[", "r_", "]"}], ":=", 
  RowBox[{"Product", "[", 
   RowBox[{
    RowBox[{"Piecewise", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"c", "[", 
           RowBox[{"[", "j", "]"}], "]"}], "^", 
          RowBox[{"s", "[", 
           RowBox[{"[", 
            RowBox[{"r", ",", "j"}], "]"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"s", "[", 
           RowBox[{"[", 
            RowBox[{"r", ",", "j"}], "]"}], "]"}], ">", "0"}]}], "}"}], "}"}],
       ",", "1"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "1", ",", "5"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.949508962989645*^9, 3.949508969793809*^9}, {
  3.949509123001677*^9, 3.949509219417609*^9}, {3.949509252383945*^9, 
  3.9495093025774937`*^9}, {3.9495093385256767`*^9, 3.949509338715643*^9}, {
  3.9495093823930597`*^9, 3.949509425094261*^9}, {3.94950946507862*^9, 
  3.9495094891955338`*^9}, {3.949510512176868*^9, 3.949510575291525*^9}, {
  3.949510845427495*^9, 3.9495108456733418`*^9}, {3.949510877756915*^9, 
  3.949510914510531*^9}, {3.949510945271747*^9, 3.949511030141487*^9}, {
  3.949511136020577*^9, 3.949511138361145*^9}, {3.9495112611089783`*^9, 
  3.949511264405383*^9}, {3.949511683275737*^9, 3.949511690271179*^9}, {
  3.9495117229463587`*^9, 3.9495117525512133`*^9}, {3.949511893731515*^9, 
  3.949511894383615*^9}, {3.949511933448835*^9, 3.9495119394350853`*^9}, {
  3.9495158296230717`*^9, 3.949515896844046*^9}, {3.949516212328989*^9, 
  3.9495162498683577`*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"e46f0276-4342-4c1c-b197-a9ddda6a5659"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ForwardReactionProduct", "[", "1", "]"}], "/.", 
  "params"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ReverseReactionProduct", "[", "1", "]"}], "/.", 
  "params"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ForwardReactionProduct", "[", "2", "]"}], "/.", 
  "params"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ReverseReactionProduct", "[", "2", "]"}], "/.", 
  "params"}]}], "Input",
 CellChangeTimes->{{3.9495159274183826`*^9, 3.949515942382193*^9}, {
  3.949515976162763*^9, 3.949515992590516*^9}, {3.949516030671195*^9, 
  3.949516068940495*^9}, {3.949516840407926*^9, 3.94951687303489*^9}, {
  3.950624109248911*^9, 3.950624110995063*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"dc1f4196-d69c-48fe-83b9-9d99d3eeacd6"],

Cell[BoxData[
 SuperscriptBox["c1", "2"]], "Output",
 CellChangeTimes->{
  3.949515942737005*^9, {3.949515977535975*^9, 3.949516069687181*^9}, {
   3.949516844947036*^9, 3.9495168734953117`*^9}, 3.9495173005576763`*^9, 
   3.949517379817993*^9, 3.949539824950844*^9, 3.950103968828392*^9, 
   3.950104200229663*^9, 3.9506197895298*^9, 3.950620756821701*^9, 
   3.9506219374635077`*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"1969b9a1-6150-4f42-a2a7-3f76810cd5a4"],

Cell[BoxData[
 RowBox[{"c2", " ", "c3"}]], "Output",
 CellChangeTimes->{
  3.949515942737005*^9, {3.949515977535975*^9, 3.949516069687181*^9}, {
   3.949516844947036*^9, 3.9495168734953117`*^9}, 3.9495173005576763`*^9, 
   3.949517379817993*^9, 3.949539824950844*^9, 3.950103968828392*^9, 
   3.950104200229663*^9, 3.9506197895298*^9, 3.950620756821701*^9, 
   3.950621937464055*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"fb285ca3-138a-4c30-8d22-c9d857f8324f"],

Cell[BoxData[
 RowBox[{"c3", " ", "c4"}]], "Output",
 CellChangeTimes->{
  3.949515942737005*^9, {3.949515977535975*^9, 3.949516069687181*^9}, {
   3.949516844947036*^9, 3.9495168734953117`*^9}, 3.9495173005576763`*^9, 
   3.949517379817993*^9, 3.949539824950844*^9, 3.950103968828392*^9, 
   3.950104200229663*^9, 3.9506197895298*^9, 3.950620756821701*^9, 
   3.95062193746453*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"cf5523a7-3191-465a-ade1-5fc01fe5babf"],

Cell[BoxData[
 SuperscriptBox["c5", "2"]], "Output",
 CellChangeTimes->{
  3.949515942737005*^9, {3.949515977535975*^9, 3.949516069687181*^9}, {
   3.949516844947036*^9, 3.9495168734953117`*^9}, 3.9495173005576763`*^9, 
   3.949517379817993*^9, 3.949539824950844*^9, 3.950103968828392*^9, 
   3.950104200229663*^9, 3.9506197895298*^9, 3.950620756821701*^9, 
   3.950621937465021*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"a9155a23-0b20-416a-8cef-a73735759867"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"EquilibriumResidual", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Log", "[", 
      RowBox[{
       FractionBox[
        RowBox[{"kf", "[", 
         RowBox[{"[", "1", "]"}], "]"}], 
        RowBox[{"kr", "[", 
         RowBox[{"[", "1", "]"}], "]"}]], "*", 
       RowBox[{
        RowBox[{"ReverseReactionProduct", "[", "1", "]"}], "/", 
        RowBox[{"ForwardReactionProduct", "[", "1", "]"}]}]}], "]"}], ",", 
     RowBox[{"Log", "[", 
      RowBox[{
       FractionBox[
        RowBox[{"kf", "[", 
         RowBox[{"[", "2", "]"}], "]"}], 
        RowBox[{"kr", "[", 
         RowBox[{"[", "2", "]"}], "]"}]], "*", 
       RowBox[{
        RowBox[{"ReverseReactionProduct", "[", "2", "]"}], "/", 
        RowBox[{"ForwardReactionProduct", "[", "2", "]"}]}]}], "]"}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"SetPrecision", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"EquilibriumResidual", "/.", "params"}], "/.", "cinit"}], ",", 
   "14"}], "]"}]}], "Input",
 CellChangeTimes->{{3.949516296518321*^9, 3.9495164413191643`*^9}, 
   3.949516503730219*^9, {3.949516698922009*^9, 3.949516730827798*^9}, {
   3.950103949767248*^9, 3.950103963990991*^9}, {3.950105074394795*^9, 
   3.95010521026125*^9}, {3.950105296384161*^9, 3.950105304856518*^9}, 
   3.950105353843704*^9, {3.950620096650669*^9, 3.950620107997974*^9}, {
   3.9506206109962053`*^9, 3.950620629656776*^9}, {3.9506206603619204`*^9, 
   3.950620679015951*^9}, 3.9506241117246027`*^9},
 CellLabel->
  "In[114]:=",ExpressionUUID->"ce583507-97db-47b7-825b-ec0423889876"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Indeterminate", ",", "Indeterminate"}], "}"}]], "Output",
 CellChangeTimes->{
  3.9495169596812763`*^9, 3.949517300572939*^9, 3.949517379838773*^9, 
   3.949539824954954*^9, {3.950103965523238*^9, 3.950103968842927*^9}, {
   3.9501041819147797`*^9, 3.950104200241808*^9}, {3.950105191305937*^9, 
   3.950105210562668*^9}, 3.950105305708557*^9, 3.950105354368442*^9, 
   3.950619789533537*^9, {3.950620097067114*^9, 3.950620108327086*^9}, {
   3.950620654476284*^9, 3.950620679574238*^9}, 3.950620756826247*^9, 
   3.950621937467581*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"3f5e002b-98f6-488e-bd02-f00234804a49"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"c\[Xi]", "[", "i_", "]"}], ":=", 
  RowBox[{
   RowBox[{"c0", "[", 
    RowBox[{"[", "i", "]"}], "]"}], "+", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"r", "=", "1"}], "2"], 
    RowBox[{
     RowBox[{"s", "[", 
      RowBox[{"[", 
       RowBox[{"r", ",", "i"}], "]"}], "]"}], 
     RowBox[{"\[Xi]", "[", 
      RowBox[{"[", "r", "]"}], "]"}]}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c\[Xi]sub", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"c1", "->", 
      RowBox[{"c\[Xi]", "[", "1", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"c2", "->", 
      RowBox[{"c\[Xi]", "[", "2", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"c3", "->", 
      RowBox[{"c\[Xi]", "[", "3", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"c4", "->", 
      RowBox[{"c\[Xi]", "[", "4", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"c5", "->", 
      RowBox[{"c\[Xi]", "[", "5", "]"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EquilibriumResidualSub", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"EquilibriumResidual", "/.", "params"}], "/.", "c\[Xi]sub"}], "/.",
     "params"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EquilibriumJacobian", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"EquilibriumResidualSub", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "\[Xi]1"}], "]"}], ",", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"EquilibriumResidualSub", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "\[Xi]2"}], "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"EquilibriumResidualSub", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", "\[Xi]1"}], "]"}], ",", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"EquilibriumResidualSub", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", "\[Xi]2"}], "]"}]}], "}"}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", 
  RowBox[{
   RowBox[{"EquilibriumJacobian", "/.", "params"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Xi]1", "->", "0"}], ",", 
     RowBox[{"\[Xi]2", "->", "0"}]}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"CForm", "[", 
  RowBox[{
   RowBox[{"EquilibriumJacobian", "/.", "params"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Xi]1", "->", "0"}], ",", 
     RowBox[{"\[Xi]2", "->", "0"}]}], "}"}]}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.949516631783876*^9, 3.94951663699189*^9}, {
  3.949516758542755*^9, 3.949516816764089*^9}, {3.949516891977007*^9, 
  3.949516935138673*^9}, {3.949517069562791*^9, 3.949517135408063*^9}, {
  3.949517185198084*^9, 3.949517211830289*^9}, {3.949517249294092*^9, 
  3.949517344438715*^9}, {3.949517500742958*^9, 3.949517835077269*^9}, {
  3.950105396646734*^9, 3.9501055425448637`*^9}, {3.950620700461866*^9, 
  3.950620832348036*^9}, {3.950621528724931*^9, 3.950621530917968*^9}, {
  3.950624112779449*^9, 3.950624114823031*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"d3e0af00-4e21-4817-bcc0-bb4d630c4235"],

Cell[BoxData[
 TemplateBox[{
  "Power", "infy", 
   "\"Infinite expression \\!\\(\\*FractionBox[\\\"1\\\", \\\"0\\\"]\\) \
encountered.\"", 2, 120, 25, 18570802661536798748, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.950621937485379*^9},
 CellLabel->
  "During evaluation of \
In[116]:=",ExpressionUUID->"677831c5-389b-43c3-8bec-20544db95045"],

Cell[BoxData[
 TemplateBox[{
  "Power", "infy", 
   "\"Infinite expression \\!\\(\\*FractionBox[\\\"1\\\", \
SuperscriptBox[\\\"0\\\", \\\"2\\\"]]\\) encountered.\"", 2, 120, 26, 
   18570802661536798748, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9506219374909554`*^9},
 CellLabel->
  "During evaluation of \
In[116]:=",ExpressionUUID->"2f22e0f5-68ee-4315-bb53-9ec2e99b3c63"],

Cell[BoxData[
 TemplateBox[{
  "Infinity", "indet", 
   "\"Indeterminate expression \\!\\(\\*RowBox[{\\\"0.`\\\", \\\" \\\", \
\\\"ComplexInfinity\\\"}]\\) encountered.\"", 2, 120, 27, 
   18570802661536798748, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.950621937521407*^9},
 CellLabel->
  "During evaluation of \
In[116]:=",ExpressionUUID->"cef7087d-e5cd-431f-8a8f-8d07f3d4ef6f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"ComplexInfinity", 
      RowBox[{"-", "2.`"}]},
     {
      RowBox[{"-", "2.`"}], "Indeterminate"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.9495176440227613`*^9, 3.949517662928234*^9}, {
   3.9495177578621387`*^9, 3.9495177608034163`*^9}, {3.9495177920227737`*^9, 
   3.949517835438161*^9}, 3.9495398249645357`*^9, 3.950103968848098*^9, 
   3.950104048334957*^9, {3.950104185077179*^9, 3.950104200245109*^9}, {
   3.950105507035903*^9, 3.95010551672075*^9}, 3.9501055839366007`*^9, 
   3.950619789549858*^9, 3.950620757210149*^9, {3.950620796425549*^9, 
   3.950620834463614*^9}, 3.9506215315419617`*^9, 3.950621937524169*^9},
 CellLabel->
  "Out[120]//MatrixForm=",ExpressionUUID->"504832f4-fd3d-4e54-ae9c-\
f7f7810ff8ee"],

Cell[BoxData[
 TemplateBox[{
  "Power", "infy", 
   "\"Infinite expression \\!\\(\\*FractionBox[\\\"1\\\", \\\"0\\\"]\\) \
encountered.\"", 2, 121, 28, 18570802661536798748, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.950621937524706*^9},
 CellLabel->
  "During evaluation of \
In[116]:=",ExpressionUUID->"04f35cfc-e512-4a7d-a4fe-9e0b143c33f0"],

Cell[BoxData[
 TemplateBox[{
  "Power", "infy", 
   "\"Infinite expression \\!\\(\\*FractionBox[\\\"1\\\", \
SuperscriptBox[\\\"0\\\", \\\"2\\\"]]\\) encountered.\"", 2, 121, 29, 
   18570802661536798748, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9506219375261927`*^9},
 CellLabel->
  "During evaluation of \
In[116]:=",ExpressionUUID->"c1100c6d-78dd-4834-83a8-57cab9fd0e2e"],

Cell[BoxData[
 TemplateBox[{
  "Infinity", "indet", 
   "\"Indeterminate expression \\!\\(\\*RowBox[{\\\"0.`\\\", \\\" \\\", \
\\\"ComplexInfinity\\\"}]\\) encountered.\"", 2, 121, 30, 
   18570802661536798748, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.9506219375274963`*^9},
 CellLabel->
  "During evaluation of \
In[116]:=",ExpressionUUID->"425f358a-428e-4bc3-b6d5-b59f1ba14a08"],

Cell["List(List(DirectedInfinity(),-2.),List(-2.,Indeterminate))", "Output",
 CellChangeTimes->{{3.9495176440227613`*^9, 3.949517662928234*^9}, {
   3.9495177578621387`*^9, 3.9495177608034163`*^9}, {3.9495177920227737`*^9, 
   3.949517835438161*^9}, 3.9495398249645357`*^9, 3.950103968848098*^9, 
   3.950104048334957*^9, {3.950104185077179*^9, 3.950104200245109*^9}, {
   3.950105507035903*^9, 3.95010551672075*^9}, 3.9501055839366007`*^9, 
   3.950619789549858*^9, 3.950620757210149*^9, {3.950620796425549*^9, 
   3.950620834463614*^9}, 3.9506215315419617`*^9, 3.9506219375289497`*^9},
 CellLabel->
  "Out[121]//CForm=",ExpressionUUID->"a55acdb2-2fbd-45b3-9576-53c0ba73c69a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NDSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"EquilibriumResidualSub", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "==", "0"}], ",", 
     RowBox[{
      RowBox[{"EquilibriumResidualSub", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "==", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Xi]1", ",", "\[Xi]2"}], "}"}], ",", "Reals"}], "]"}]], "Input",\

 CellChangeTimes->{{3.950621094070209*^9, 3.9506210989643106`*^9}, {
  3.950621129085163*^9, 3.950621161439003*^9}, {3.950621305465562*^9, 
  3.950621369468131*^9}, {3.9506214525425873`*^9, 3.950621469136088*^9}, {
  3.950621515635631*^9, 3.9506215167759857`*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"3de43626-b0cb-48bd-869e-a511c481e33d"],

Cell[BoxData[
 TemplateBox[{
  "NDSolve", "dsvar", 
   "\"\\!\\(\\*TemplateBox[List[], \\\"Reals\\\"]\\) cannot be used as a \
variable.\"", 2, 122, 31, 18570802661536798748, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.950621344092284*^9, 3.950621369890313*^9}, {
   3.950621453053441*^9, 3.950621470290691*^9}, 3.950621533812393*^9, 
   3.950621937547042*^9},
 CellLabel->
  "During evaluation of \
In[122]:=",ExpressionUUID->"5078b5c9-f7b5-410d-bd31-ca044104ace5"],

Cell[BoxData[
 RowBox[{"NDSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"Log", "[", 
       FractionBox[
        RowBox[{"\[Xi]1", " ", 
         RowBox[{"(", 
          RowBox[{"0.5`", "\[VeryThinSpace]", "+", "\[Xi]1", "-", "\[Xi]2"}], 
          ")"}]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"2", " ", "\[Xi]1"}]}], ")"}], "2"]], "]"}], "\[Equal]", 
      "0"}], ",", 
     RowBox[{
      RowBox[{"Log", "[", 
       FractionBox[
        RowBox[{"4", " ", 
         SuperscriptBox["\[Xi]2", "2"]}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1.`", "\[VeryThinSpace]", "-", "\[Xi]2"}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"0.5`", "\[VeryThinSpace]", "+", "\[Xi]1", "-", "\[Xi]2"}], 
          ")"}]}]], "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Xi]1", ",", "\[Xi]2"}], "}"}], ",", 
   TemplateBox[{},
    "Reals"]}], "]"}]], "Output",
 CellChangeTimes->{3.9506219375495167`*^9},
 CellLabel->
  "Out[122]=",ExpressionUUID->"834e6b5d-6134-40b7-a4d6-482010e9dfaa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NDSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1.`*^-16", "+", "\[Xi]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"0.5`", "\[VeryThinSpace]", "+", "\[Xi]1", "-", "\[Xi]2"}], 
         ")"}]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"2", " ", "\[Xi]1"}]}], ")"}], "2"]], "\[Equal]", "1"}], 
     ",", 
     RowBox[{
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1.`*^-16", "+", 
          RowBox[{"2", " ", "\[Xi]2"}]}], ")"}], "2"], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1.`", "\[VeryThinSpace]", "-", "\[Xi]2"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"0.5`", "\[VeryThinSpace]", "+", "\[Xi]1", "-", "\[Xi]2"}], 
         ")"}]}]], "\[Equal]", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Xi]1", ",", "\[Xi]2"}], "}"}], ",", "Reals"}], "]"}]], "Input",\

 CellChangeTimes->{{3.950621561784775*^9, 3.9506215944209623`*^9}},
 CellLabel->
  "In[123]:=",ExpressionUUID->"92feddec-44c3-4862-95c7-bbea8d699232"],

Cell[BoxData[
 TemplateBox[{
  "NDSolve", "dsvar", 
   "\"\\!\\(\\*TemplateBox[List[], \\\"Reals\\\"]\\) cannot be used as a \
variable.\"", 2, 123, 32, 18570802661536798748, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.9506215618195553`*^9, 3.950621594981222*^9}, 
   3.9506219375634193`*^9},
 CellLabel->
  "During evaluation of \
In[123]:=",ExpressionUUID->"718dc24a-4500-4b2d-8564-a68bfdab6a92"],

Cell[BoxData[
 RowBox[{"NDSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1.`*^-16", "+", "\[Xi]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"0.5`", "\[VeryThinSpace]", "+", "\[Xi]1", "-", "\[Xi]2"}], 
         ")"}]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"2", " ", "\[Xi]1"}]}], ")"}], "2"]], "\[Equal]", "1"}], 
     ",", 
     RowBox[{
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1.`*^-16", "+", 
          RowBox[{"2", " ", "\[Xi]2"}]}], ")"}], "2"], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1.`", "\[VeryThinSpace]", "-", "\[Xi]2"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"0.5`", "\[VeryThinSpace]", "+", "\[Xi]1", "-", "\[Xi]2"}], 
         ")"}]}]], "\[Equal]", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Xi]1", ",", "\[Xi]2"}], "}"}], ",", 
   TemplateBox[{},
    "Reals"]}], "]"}]], "Output",
 CellChangeTimes->{{3.950621561821637*^9, 3.95062159498312*^9}, 
   3.950621937565649*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"9264652e-1fa4-4139-ac2c-3f8b7342bb88"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kinetic Reactions", "Subsection",
 CellChangeTimes->{{3.9506195084339523`*^9, 
  3.950619518149674*^9}},ExpressionUUID->"f93af8ac-46a7-49a0-adb4-\
98e1c4dc47f1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ReactionRates", "[", "i_", "]"}], ":=", 
  RowBox[{"Sum", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"s", "[", 
      RowBox[{"[", 
       RowBox[{"r", ",", "i"}], "]"}], "]"}], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"kf", "[", 
         RowBox[{"[", "r", "]"}], "]"}], "*", 
        RowBox[{"ForwardReactionProduct", "[", "r", "]"}]}], "-", 
       RowBox[{
        RowBox[{"kr", "[", 
         RowBox[{"[", "r", "]"}], "]"}], "*", 
        RowBox[{"ReverseReactionProduct", "[", "r", "]"}]}]}], ")"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"r", ",", "1", ",", "2"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ForwardReactionProduct", "[", "1", "]"}], "/.", 
  "params"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ReverseReactionProduct", "[", "1", "]"}], "/.", 
  "params"}], "\[IndentingNewLine]", 
 RowBox[{"ExpectedReactionRates", "/.", "params"}]}], "Input",
 CellChangeTimes->{{3.9506195562322206`*^9, 3.950619626625773*^9}, {
  3.950619718577805*^9, 3.950619800681814*^9}, {3.95061986779146*^9, 
  3.95061996132526*^9}, {3.9506200291537457`*^9, 3.9506200360357018`*^9}, {
  3.950624115592607*^9, 3.95062411615933*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"a9563b96-1ad5-4b54-b0f2-3eb787d4be14"],

Cell[BoxData[
 SuperscriptBox["c1", "2"]], "Output",
 CellChangeTimes->{{3.950619774625002*^9, 3.950619801136551*^9}, {
   3.950619875145073*^9, 3.9506198907619867`*^9}, 3.950619927968605*^9, 
   3.9506199625334063`*^9, 3.9506207573158827`*^9, 3.950621937582034*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"dc973146-532a-4ad4-bdfa-9c2627023bed"],

Cell[BoxData[
 RowBox[{"c2", " ", "c3"}]], "Output",
 CellChangeTimes->{{3.950619774625002*^9, 3.950619801136551*^9}, {
   3.950619875145073*^9, 3.9506198907619867`*^9}, 3.950619927968605*^9, 
   3.9506199625334063`*^9, 3.9506207573158827`*^9, 3.950621937582492*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"4d3faebd-101c-48e5-927a-c28771eda982"],

Cell[BoxData["ExpectedReactionRates"], "Output",
 CellChangeTimes->{{3.950619774625002*^9, 3.950619801136551*^9}, {
   3.950619875145073*^9, 3.9506198907619867`*^9}, 3.950619927968605*^9, 
   3.9506199625334063`*^9, 3.9506207573158827`*^9, 3.950621937582931*^9},
 CellLabel->
  "Out[127]=",ExpressionUUID->"7b951bf1-2b60-4693-9a7d-fc1c2b23f8bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"0", "+", "\[Xi]1"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"0.5", "\[VeryThinSpace]", "+", "\[Xi]1", "-", "\[Xi]2"}], 
         ")"}]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"2", " ", "\[Xi]1"}]}], ")"}], "2"]], "\[Equal]", "1"}], 
     ",", 
     RowBox[{
      FractionBox[
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"0", "+", 
          RowBox[{"2", " ", "\[Xi]2"}]}], ")"}], "2"], 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", "\[Xi]2"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"0.5", "\[VeryThinSpace]", "+", "\[Xi]1", "-", "\[Xi]2"}], 
         ")"}]}]], "\[Equal]", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Xi]1", ",", "\[Xi]2"}], "}"}], ",", "Reals"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Soln", "=", 
  RowBox[{"NSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"Log", "[", 
        FractionBox[
         RowBox[{
          RowBox[{"(", 
           RowBox[{"0", "+", "\[Xi]1"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"0.5", "\[VeryThinSpace]", "+", "\[Xi]1", "-", "\[Xi]2"}], 
           ")"}]}], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{"2", " ", "\[Xi]1"}]}], ")"}], "2"]], "]"}], "\[Equal]", 
       "0"}], ",", 
      RowBox[{
       RowBox[{"Log", "[", 
        FractionBox[
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"0", "+", 
            RowBox[{"2", " ", "\[Xi]2"}]}], ")"}], "2"], 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "-", "\[Xi]2"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{"0.5", "\[VeryThinSpace]", "+", "\[Xi]1", "-", "\[Xi]2"}], 
           ")"}]}]], "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\[Xi]1", ",", "\[Xi]2"}], "}"}], ",", "Reals"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", 
  RowBox[{"Ceq", "=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"c\[Xi]sub", "/.", "Soln"}], "/.", "params"}], ")"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.950621622967383*^9, 3.950621682644403*^9}, {
  3.9506217524874353`*^9, 3.950621757449176*^9}, {3.950621847834559*^9, 
  3.950621914741967*^9}, {3.9506219682108183`*^9, 3.950621985732566*^9}, {
  3.9506220569636793`*^9, 3.950622110061811*^9}, {3.950622530822591*^9, 
  3.9506225404486094`*^9}, {3.9506225782489367`*^9, 3.9506226038553057`*^9}, {
  3.950640959674222*^9, 3.950640992498761*^9}, {3.95064122966012*^9, 
  3.9506412419950438`*^9}, {3.9506412908715553`*^9, 3.950641308127881*^9}},
 CellLabel->
  "In[177]:=",ExpressionUUID->"7155e2a2-6d83-4e5d-9e3b-07e69a5cf2e6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Xi]2", "\[Rule]", 
      RowBox[{"-", "1.6073650941506716`"}]}], ",", 
     RowBox[{"\[Xi]1", "\[Rule]", "1.8562110873209028`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Xi]2", "\[Rule]", "0.4093759165599023`"}], ",", 
     RowBox[{"\[Xi]1", "\[Rule]", "1.0443695326897278`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Xi]2", "\[Rule]", "0.2979853722659402`"}], ",", 
     RowBox[{"\[Xi]1", "\[Rule]", "0.3039308530379378`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Xi]2", "\[Rule]", 
      RowBox[{"-", "0.8499961946751704`"}]}], ",", 
     RowBox[{"\[Xi]1", "\[Rule]", "0.2121551936180979`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.9506214931045713`*^9, {3.9506216160942087`*^9, 3.950621642955104*^9}, 
   3.9506216847753563`*^9, 3.950621757962051*^9, {3.950621854695477*^9, 
   3.950621986048752*^9}, {3.950622058080862*^9, 3.950622110419211*^9}, 
   3.950622541334856*^9, {3.9506409645439043`*^9, 3.950640992901922*^9}, 
   3.950641242594755*^9, {3.950641288609098*^9, 3.9506413084502897`*^9}},
 CellLabel->
  "Out[177]=",ExpressionUUID->"195e6961-fb79-4c6c-adb3-3f720ef6798e"],

Cell[BoxData[
 TemplateBox[{
  "NSolve", "ratnz", 
   "\"NSolve was unable to solve the system with inexact coefficients. The \
answer was obtained by solving a corresponding exact system and numericizing \
the result.\"", 2, 178, 37, 18570802661536798748, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.95064124259179*^9, {3.950641288606017*^9, 3.950641308469611*^9}},
 CellLabel->
  "During evaluation of \
In[177]:=",ExpressionUUID->"d31e37c6-f0ae-415d-82e0-a5e91d291f0b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Xi]1", "\[Rule]", "0.21215519361809793`"}], ",", 
     RowBox[{"\[Xi]2", "\[Rule]", 
      RowBox[{"-", "0.8499961946751705`"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Xi]1", "\[Rule]", "0.3039308530379379`"}], ",", 
     RowBox[{"\[Xi]2", "\[Rule]", "0.2979853722659402`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Xi]1", "\[Rule]", "1.0443695326897278`"}], ",", 
     RowBox[{"\[Xi]2", "\[Rule]", "0.40937591655990224`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[Xi]1", "\[Rule]", "1.8562110873209032`"}], ",", 
     RowBox[{"\[Xi]2", "\[Rule]", 
      RowBox[{"-", "1.607365094150672`"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.9506214931045713`*^9, {3.9506216160942087`*^9, 3.950621642955104*^9}, 
   3.9506216847753563`*^9, 3.950621757962051*^9, {3.950621854695477*^9, 
   3.950621986048752*^9}, {3.950622058080862*^9, 3.950622110419211*^9}, 
   3.950622541334856*^9, {3.9506409645439043`*^9, 3.950640992901922*^9}, 
   3.950641242594755*^9, {3.950641288609098*^9, 3.950641308472361*^9}},
 CellLabel->
  "Out[178]=",ExpressionUUID->"8b9e8922-9e93-44f7-90fe-ecb2a1465f07"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"c1", "\[Rule]", "0.5756896127638041`"}], 
      RowBox[{"c2", "\[Rule]", "0.21215519361809793`"}], 
      RowBox[{"c3", "\[Rule]", "1.5621513882932683`"}], 
      RowBox[{"c4", "\[Rule]", "1.8499961946751706`"}], 
      RowBox[{"c5", "\[Rule]", 
       RowBox[{"-", "1.699992389350341`"}]}]},
     {
      RowBox[{"c1", "\[Rule]", "0.39213829392412425`"}], 
      RowBox[{"c2", "\[Rule]", "0.3039308530379379`"}], 
      RowBox[{"c3", "\[Rule]", "0.5059454807719976`"}], 
      RowBox[{"c4", "\[Rule]", "0.7020146277340598`"}], 
      RowBox[{"c5", "\[Rule]", "0.5959707445318804`"}]},
     {
      RowBox[{"c1", "\[Rule]", 
       RowBox[{"-", "1.0887390653794555`"}]}], 
      RowBox[{"c2", "\[Rule]", "1.0443695326897278`"}], 
      RowBox[{"c3", "\[Rule]", "1.1349936161298255`"}], 
      RowBox[{"c4", "\[Rule]", "0.5906240834400978`"}], 
      RowBox[{"c5", "\[Rule]", "0.8187518331198045`"}]},
     {
      RowBox[{"c1", "\[Rule]", 
       RowBox[{"-", "2.7124221746418065`"}]}], 
      RowBox[{"c2", "\[Rule]", "1.8562110873209032`"}], 
      RowBox[{"c3", "\[Rule]", "3.9635761814715753`"}], 
      RowBox[{"c4", "\[Rule]", "2.607365094150672`"}], 
      RowBox[{"c5", "\[Rule]", 
       RowBox[{"-", "3.214730188301344`"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.9506214931045713`*^9, {3.9506216160942087`*^9, 3.950621642955104*^9}, 
   3.9506216847753563`*^9, 3.950621757962051*^9, {3.950621854695477*^9, 
   3.950621986048752*^9}, {3.950622058080862*^9, 3.950622110419211*^9}, 
   3.950622541334856*^9, {3.9506409645439043`*^9, 3.950640992901922*^9}, 
   3.950641242594755*^9, {3.950641288609098*^9, 3.9506413084732027`*^9}},
 CellLabel->
  "Out[179]//MatrixForm=",ExpressionUUID->"407f4898-0e4c-4a1e-8aee-\
70ded463acc9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1699, 1051},
WindowMargins->{{360, Automatic}, {-192, Automatic}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{
             LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"59958113-fd28-4172-8c64-78d08b2f5464"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 160, 3, 53, "Subsection",ExpressionUUID->"fc26722d-7023-48b8-85c1-46767d9cf480"],
Cell[CellGroupData[{
Cell[761, 29, 178, 3, 43, "Subsubsection",ExpressionUUID->"1381253b-1cee-4677-9924-3ae5ff3f591b"],
Cell[942, 34, 1627, 31, 335, "Input",ExpressionUUID->"f05eb77c-7421-427a-aa79-c3b5ccb04b2b"],
Cell[2572, 67, 298, 6, 49, "Input",ExpressionUUID->"9f948fa6-a196-4942-89cd-3bcc02e84379"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2919, 79, 225, 4, 53, "Subsection",ExpressionUUID->"eb36e91f-06f8-4680-b0a7-05604cf51085"],
Cell[3147, 85, 1196, 31, 49, "Input",ExpressionUUID->"effab617-c8cb-4bd9-9fd9-e748f6e0df0b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4380, 121, 157, 3, 66, "Section",ExpressionUUID->"e6fcff66-665b-4fac-bf98-e002eed40fab"],
Cell[4540, 126, 1019, 28, 125, "Input",ExpressionUUID->"846ea83c-dafa-44d9-9f09-382cf0c65a5c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5596, 159, 165, 3, 66, "Section",ExpressionUUID->"ddc1104c-460c-4b4e-9381-a177b6a320d1"],
Cell[5764, 164, 2472, 62, 49, "Input",ExpressionUUID->"e46f0276-4342-4c1c-b197-a9ddda6a5659"],
Cell[CellGroupData[{
Cell[8261, 230, 776, 18, 90, "Input",ExpressionUUID->"dc1f4196-d69c-48fe-83b9-9d99d3eeacd6"],
Cell[9040, 250, 468, 9, 33, "Output",ExpressionUUID->"1969b9a1-6150-4f42-a2a7-3f76810cd5a4"],
Cell[9511, 261, 466, 9, 33, "Output",ExpressionUUID->"fb285ca3-138a-4c30-8d22-c9d857f8324f"],
Cell[9980, 272, 465, 9, 33, "Output",ExpressionUUID->"cf5523a7-3191-465a-ade1-5fc01fe5babf"],
Cell[10448, 283, 466, 9, 33, "Output",ExpressionUUID->"a9155a23-0b20-416a-8cef-a73735759867"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10951, 297, 1589, 39, 68, "Input",ExpressionUUID->"ce583507-97db-47b7-825b-ec0423889876"],
Cell[12543, 338, 659, 12, 33, "Output",ExpressionUUID->"3f5e002b-98f6-488e-bd02-f00234804a49"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13239, 355, 3287, 86, 320, "Input",ExpressionUUID->"d3e0af00-4e21-4817-bcc0-bb4d630c4235"],
Cell[16529, 443, 372, 9, 36, "Message",ExpressionUUID->"677831c5-389b-43c3-8bec-20544db95045"],
Cell[16904, 454, 405, 10, 37, "Message",ExpressionUUID->"2f22e0f5-68ee-4315-bb53-9ec2e99b3c63"],
Cell[17312, 466, 409, 10, 26, "Message",ExpressionUUID->"cef7087d-e5cd-431f-8a8f-8d07f3d4ef6f"],
Cell[17724, 478, 1162, 27, 60, "Output",ExpressionUUID->"504832f4-fd3d-4e54-ae9c-f7f7810ff8ee"],
Cell[18889, 507, 372, 9, 36, "Message",ExpressionUUID->"04f35cfc-e512-4a7d-a4fe-9e0b143c33f0"],
Cell[19264, 518, 405, 10, 37, "Message",ExpressionUUID->"c1100c6d-78dd-4834-83a8-57cab9fd0e2e"],
Cell[19672, 530, 411, 10, 26, "Message",ExpressionUUID->"425f358a-428e-4bc3-b6d5-b59f1ba14a08"],
Cell[20086, 542, 677, 9, 47, "Output",ExpressionUUID->"a55acdb2-2fbd-45b3-9576-53c0ba73c69a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20800, 556, 771, 19, 29, "Input",ExpressionUUID->"3de43626-b0cb-48bd-869e-a511c481e33d"],
Cell[21574, 577, 495, 11, 26, "Message",ExpressionUUID->"5078b5c9-f7b5-410d-bd31-ca044104ace5"],
Cell[22072, 590, 1125, 34, 51, "Output",ExpressionUUID->"834e6b5d-6134-40b7-a4d6-482010e9dfaa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23234, 629, 1172, 35, 187, "Input",ExpressionUUID->"92feddec-44c3-4862-95c7-bbea8d699232"],
Cell[24409, 666, 427, 10, 26, "Message",ExpressionUUID->"718dc24a-4500-4b2d-8564-a68bfdab6a92"],
Cell[24839, 678, 1219, 37, 53, "Output",ExpressionUUID->"9264652e-1fa4-4139-ac2c-3f8b7342bb88"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26095, 720, 167, 3, 53, "Subsection",ExpressionUUID->"f93af8ac-46a7-49a0-adb4-98e1c4dc47f1"],
Cell[CellGroupData[{
Cell[26287, 727, 1304, 34, 90, "Input",ExpressionUUID->"a9563b96-1ad5-4b54-b0f2-3eb787d4be14"],
Cell[27594, 763, 349, 6, 33, "Output",ExpressionUUID->"dc973146-532a-4ad4-bdfa-9c2627023bed"],
Cell[27946, 771, 349, 6, 33, "Output",ExpressionUUID->"4d3faebd-101c-48e5-927a-c28771eda982"],
Cell[28298, 779, 345, 5, 33, "Output",ExpressionUUID->"7b951bf1-2b60-4693-9a7d-fc1c2b23f8bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28680, 789, 2900, 82, 116, "Input",ExpressionUUID->"7155e2a2-6d83-4e5d-9e3b-07e69a5cf2e6"],
Cell[31583, 873, 1248, 29, 33, "Output",ExpressionUUID->"195e6961-fb79-4c6c-adb3-3f720ef6798e"],
Cell[32834, 904, 503, 11, 26, "Message",ExpressionUUID->"d31e37c6-f0ae-415d-82e0-a5e91d291f0b"],
Cell[33340, 917, 1244, 28, 33, "Output",ExpressionUUID->"8b9e8922-9e93-44f7-90fe-ecb2a1465f07"],
Cell[34587, 947, 2193, 50, 94, "Output",ExpressionUUID->"407f4898-0e4c-4a1e-8aee-70ded463acc9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

